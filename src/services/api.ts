/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
 */

/**
 * –ë–∞–∑–æ–≤—ã–π URL API
 */
export const API_BASE_URL = 'https://5.129.199.72:9090';

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const loggerOptions = {
  enabled: true, // –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  logRequestBody: true, // –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
  logResponseBody: true, // –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
  logHeaders: false, // –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
};

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –æ–ø—Ü–∏–π –∑–∞–ø—Ä–æ—Å–∞
 */
interface RequestOptions extends RequestInit {
  skipLogging?: boolean; // –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
 * @param url URL –∑–∞–ø—Ä–æ—Å–∞
 * @param options –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 * @param response –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
 * @param responseBody –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
 * @param startTime –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
 */
const logApiCall = async (
  url: string,
  options: RequestInit,
  response?: Response,
  responseBody?: any,
  startTime?: number
) => {
  if (!loggerOptions.enabled) return;

  const method = options.method || 'GET';
  const endTime = performance.now();
  const duration = startTime ? `${(endTime - startTime).toFixed(2)}ms` : 'unknown';

  // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –ª–æ–≥–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
  console.group(`%c API ${method} ${url}`, 'color: #2563eb; font-weight: bold;');
  console.log(`%c ‚è±Ô∏è Duration: ${duration}`, 'color: #0369a1');

  // –õ–æ–≥–∏—Ä—É–µ–º URL –∏ –º–µ—Ç–æ–¥
  console.log(`%c üì® Request: ${method} ${url}`, 'color: #4b5563');

  // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –≤–∫–ª—é—á–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª –∑–∞–ø—Ä–æ—Å–æ–≤
  if (loggerOptions.logRequestBody && options.body) {
    try {
      const bodyData = typeof options.body === 'string'
        ? JSON.parse(options.body)
        : options.body;
      console.log('%c üì¶ Request Body:', 'color: #4b5563', bodyData);
    } catch (e) {
      console.log('%c üì¶ Request Body:', 'color: #4b5563', options.body);
    }
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  if (loggerOptions.logHeaders && options.headers) {
    console.log('%c üìã Request Headers:', 'color: #4b5563', options.headers);
  }

  // –ï—Å–ª–∏ –±—ã–ª –æ—Ç–≤–µ—Ç, –ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –∏ —Ç–µ–ª–æ
  if (response) {
    const statusColor = response.ok ? '#16a34a' : '#dc2626';
    console.log(`%c üì¨ Response: ${response.status} ${response.statusText}`, `color: ${statusColor}`);

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    if (loggerOptions.logHeaders) {
      const responseHeaders: Record<string, string> = {};
      response.headers.forEach((value, key) => {
        responseHeaders[key] = value;
      });
      console.log('%c üìã Response Headers:', 'color: #4b5563', responseHeaders);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –≤–∫–ª—é—á–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª –æ—Ç–≤–µ—Ç–æ–≤
    if (loggerOptions.logResponseBody && responseBody !== undefined) {
      console.log('%c üì¶ Response Body:', 'color: #4b5563', responseBody);
    }
  }

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –ª–æ–≥–æ–≤
  console.groupEnd();
};

/**
 * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @param url –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –ø–æ–ª–Ω—ã–π URL –∑–∞–ø—Ä–æ—Å–∞
 * @param options –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ (RequestInit + skipLogging)
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
 */
export const apiRequest = async <T>(url: string, options: RequestOptions = {}): Promise<T> => {
  // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π
  const fullUrl = url.startsWith('http') ? url : `${API_BASE_URL}${url}`;

  // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const startTime = performance.now();

  // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
  try {
    const response = await fetch(fullUrl, options);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON –∏–ª–∏ —Ç–µ–∫—Å—Ç, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç Content-Type
    let responseBody;
    const contentType = response.headers.get('content-type');

    if (contentType && contentType.includes('application/json')) {
      responseBody = await response.json();
    } else {
      responseBody = await response.text();
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if (!options.skipLogging) {
      await logApiCall(fullUrl, options, response, responseBody, startTime);
    }

    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ OK, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (!response.ok) {
      throw new Error(`API error: ${response.status} ${response.statusText}`);
    }

    return responseBody as T;
  } catch (error) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    if (!options.skipLogging) {
      console.error(`%c üö® API Error for ${fullUrl}:`, 'color: #dc2626', error);
      await logApiCall(fullUrl, options, undefined, undefined, startTime);
    }
    throw error;
  }
};

/**
 * GET –∑–∞–ø—Ä–æ—Å
 * @param url URL –∑–∞–ø—Ä–æ—Å–∞
 * @param options –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
 */
export const get = <T>(url: string, options: RequestOptions = {}): Promise<T> => {
  return apiRequest<T>(url, {
    method: 'GET',
    ...options,
  });
};

/**
 * POST –∑–∞–ø—Ä–æ—Å
 * @param url URL –∑–∞–ø—Ä–æ—Å–∞
 * @param body –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
 * @param options –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
 */
export const post = <T>(url: string, body: any, options: RequestOptions = {}): Promise<T> => {
  return apiRequest<T>(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
    body: JSON.stringify(body),
    ...options,
  });
};

/**
 * PUT –∑–∞–ø—Ä–æ—Å
 * @param url URL –∑–∞–ø—Ä–æ—Å–∞
 * @param body –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
 * @param options –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
 */
export const put = <T>(url: string, body: any, options: RequestOptions = {}): Promise<T> => {
  return apiRequest<T>(url, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
    body: JSON.stringify(body),
    ...options,
  });
};

/**
 * DELETE –∑–∞–ø—Ä–æ—Å
 * @param url URL –∑–∞–ø—Ä–æ—Å–∞
 * @param options –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
 */
export const del = <T>(url: string, options: RequestOptions = {}): Promise<T> => {
  return apiRequest<T>(url, {
    method: 'DELETE',
    ...options,
  });
};
